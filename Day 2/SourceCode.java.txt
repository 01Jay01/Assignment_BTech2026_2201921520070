class NeighborSum {
    int[][] grid = new int[10][10];
    int i=0,j=0;
    public NeighborSum(int[][] grid) {
        this.grid=grid;
    }
    public void  help(int value){
        for(i=0;i<grid.length;i++){
            for(j=0;j<grid[i].length;j++){
                if(grid[i][j]==value){
                    this.i=i;
                    this.j=j;
                    return;
                }
            }
        }
    }
    public int adjacentSum(int value) {
        int n=grid.length;
        help(value);
        if(i==0){
            if(j==0){
                return (grid[i+1][j]+grid[i][j+1]);
            }
            else if(j==n-1){
                return (grid[i][j-1]+grid[i+1][j]);
            }
            else{
                return (grid[i][j-1]+grid[i+1][j]+grid[i][j+1]);
            }
        }
        else if(i==n-1){
            if(j==0){
                return (grid[i][j+1]+grid[i-1][j]);
            }
            else if(j==n-1){
                return (grid[i][j-1]+grid[i-1][j]);
            }
            else{
                return (grid[i][j-1]+grid[i-1][j]+grid[i][j+1]);
            }
        }
        else{
            if(j==0){
                return (grid[i-1][j]+grid[i][j+1]+grid[i+1][j]);
            }
            else if(j==n-1){
                return (grid[i-1][j]+grid[i][j-1]+grid[i+1][j]);
            }
            else{
                return (grid[i][j-1]+grid[i][j+1]+grid[i-1][j]+grid[i+1][j]);
            }
        }
    }
    
    public int diagonalSum(int value) {
        int sum=0;
        help(value);
        if(i!=0 &&  j!=0){
            sum+=grid[i-1][j-1];
        }
        if(i!=0 && j!=grid[i].length-1){
            sum+=grid[i-1][j+1];
        }
        if(i!=grid.length-1 &&  j!=0){
            sum+=grid[i+1][j-1];
        }
        if(i!=grid.length-1 && j!=grid[i].length-1){
            sum+=grid[i+1][j+1];
        }
        return sum;
    }
}